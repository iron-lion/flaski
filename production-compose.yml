version: '3.7'

services:

 init:
  container_name: init
  image: mpgagebioinformatics/flaski:latest
  # build:
  #   context: ~/myapp
  #   dockerfile: services/server/Dockerfile
  #   args:
  #     BUILD_NAME: myapp
  #     MYAPP_VERSION: dev
  #     UPGRADE_REQS: "no"
  entrypoint: /myapp/services/init/entrypoint.sh
  user: root
  volumes:
   - data3:/myapp_data/users
   - private:/flaski_private
   - mysql-certs:/etc/mysql/certs
   - ~/backups:/backup
  environment:
   APP_NAME: myapp
   FLASK_ENV: init
   APP_URL: https://flaski.age.mpg.de
   ADMINS: flaski@age.mpg.de
   RESTORE_DB: 0
   RESTORE_USERS_DATA: 0
   UPGRADE_DB: 0
   RESTORE_CERTS: 0
   RESTORE_DATALAKE: 0
   MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
   SECRET_KEY: ${SECRET_KEY}
   REDIS_ADDRESS: redis:6379/0
   REDIS_PASSWORD: ${REDIS_PASSWORD}
   MYSQL_USER: flaski
   MYSQL_PASSWORD: ${MYSQL_PASSWORD} 
   MYSQL_HOST: mariadb
   MYSQL_PORT: 3306
   DB_NAME: flaski
  links:
   - mariadb
  depends_on:
   - mariadb

 server3:
  container_name: server3
  image: mpgagebioinformatics/flaski:stable
  # build:
  #   context: ./
  #   dockerfile: Dockerfile
  #   args:
  #     APP_VERSION: dev
  #     PYFLASKI_VERSION: dev
  restart: always
  volumes:
   - data3:/flaski_data/users
   - private:/flaski_private
   - mysql-certs:/etc/mysql/certs
   - ~/mpcdf:/mpcdf
  environment:
   N_WORKERS: 4
   APP_NAME: myapp
   APP_TITLE: flaski
  #  INSTANCE: local
   SECRET_KEY: ${SECRET_KEY}
   APP_URL: https://flaski.age.mpg.de
   PAGE_PREFIX: ""
   FLASK_ENV: production
   MAIL_PASSWORD: ${MAIL_PASSWORD}
   MAIL_PORT: 587
   MAIL_SERVER: mail.age.mpg.de
   MAIL_USERNAME: flaski@age.mpg.de
   ADMINS: flaski@age.mpg.de
   MAIL_USE_TLS: '1'
   MYSQL_HOST: mariadb
   MYSQL_PORT: 3306
   MYSQL_PASSWORD: ${MYSQL_PASSWORD}
   MYSQL_USER: flaski
   DB_NAME: flaski
   REDIS_ADDRESS: redis:6379/0
   REDIS_PASSWORD: ${REDIS_PASSWORD}
   PUREFTPD_AUTH_SALT: ${PUREFTPD_AUTH_SALT}
   PUREFTPD_MYSQL_SERVER: ${PUREFTPD_MYSQL_SERVER}
   PUREFTPD_MYSQL_PORT: 3306
   PUREFTPD_MYSQL_USER: pureftpd
   PUREFTPD_MYSQL_PASS: ${PUREFTPD_MYSQL_PASS}
   PUREFTPD_MYSQL_DB: pureftpd
  labels:
   - traefik.enable=true
   - traefik.http.services.server3.loadbalancer.server.port=8000
   - traefik.http.routers.server3.entrypoints=web
   - traefik.http.routers.server3.rule=Host(`flaski.age.mpg.de`) 
   - traefik.http.middlewares.server3.redirectscheme.scheme=https
   - traefik.http.routers.server3.middlewares=server3@docker
   - traefik.http.routers.server3_https.entrypoints=websecure   
   - traefik.http.routers.server3_https.rule=Host(`flaski.age.mpg.de`)
   - traefik.http.routers.server3_https.tls=true
   - traefik.http.routers.server3_https.tls.certresolver=myresolver
  links:
   - mariadb
   - redis
  depends_on:
   - init
   - mariadb
   - redis

 backup:
  container_name: backup
  image: mpgagebioinformatics/myapp:latest
  # build:
  #   context: ~/myapp
  #   dockerfile: services/server/Dockerfile
  #   args:
  #     BUILD_NAME: myapp
  #     MYAPP_VERSION: dev
  #     UPGRADE_REQS: "no"
  entrypoint: /myapp/services/backup/entrypoint.sh
  user: root
  depends_on:
   - mariadb
   - init
  volumes:
   - data3:/myapp_data/users:ro
   - ~/backups:/backup
  environment:
   APP_NAME: flaski
   INSTANCE: backup
   FLASK_ENV: backup
   LOGS: /var/log/flaski/
   MYSQL_HOST: mariadb
   MYSQL_PORT: 3306
   MYSQL_PASSWORD: ${MYSQL_PASSWORD}
   MYSQL_USER: flaski
   DB_NAME: flaski
  restart: unless-stopped
  links:
   - mariadb

 mariadb:
  container_name: mariadb
  image: mariadb:10.5
  restart: always
  volumes:
   - db:/var/lib/mysql
  environment:
    MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

 redis:
  container_name: redis
  image: redis:7
  restart: always
  command: redis-server --requirepass ${REDIS_PASSWORD}

 reverse-proxy:
  image: "traefik:v2.9"
  restart: always
  container_name: "traefik"
  command:
    - --providers.docker=true
    - --providers.docker.useBindPortIP=true
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443
    - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
    - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    - --certificatesresolvers.myresolver.acme.httpchallenge=true
    - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
    - --certificatesresolvers.myresolver.acme.tlschallenge=true
    - --certificatesresolvers.myresolver.acme.email=jboucas@age.mpg.de
    #- --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    #- --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme-dev-4.json
    - --certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
    - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme-prod-3.json
    - --log.level=DEBUG
  ports:
    - 80:80
    - 443:443
  volumes:
    - ~/letsencrypt:/letsencrypt
    - /var/run/docker.sock:/var/run/docker.sock:ro
  labels:
    - traefik.enable=true
    # Global redir to https
    - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
    - traefik.http.routers.http-catchall.entrypoints=web
    - traefik.http.routers.http-catchall.middlewares=redirect-to-https
    - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

  depends_on:
   - server3

volumes:
 data3:
  external: false
 db:
  external: false
 private:
  external: false
 mysql-certs:
  external: false
